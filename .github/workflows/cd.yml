name: CD Pipeline

on:
  push:
    branches: [main, staging]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '20.x'
  PNPM_VERSION: '8'

jobs:
  # Determine deployment environment
  determine-environment:
    name: Determine Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.determine.outputs.environment }}
      url: ${{ steps.determine.outputs.url }}
    steps:
      - name: Determine deployment environment
        id: determine
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          else
            echo "environment=preview" >> $GITHUB_OUTPUT
          fi
          
          case "${{ steps.determine.outputs.environment }}" in
            production)
              echo "url=https://fieldreservations.com" >> $GITHUB_OUTPUT
              ;;
            staging)
              echo "url=https://staging.fieldreservations.com" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "url=https://preview.fieldreservations.com" >> $GITHUB_OUTPUT
              ;;
          esac

  # Database migrations
  database-migrations:
    name: Database Migrations
    needs: determine-environment
    runs-on: ubuntu-latest
    environment: ${{ needs.determine-environment.outputs.environment }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest
      
      - name: Run migrations
        run: |
          supabase link --project-ref ${{ secrets.SUPABASE_PROJECT_REF }}
          supabase db push --dry-run
          supabase db push
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      
      - name: Verify migrations
        run: |
          supabase db diff --use-migra
          supabase test db

  # Deploy to Vercel
  deploy-vercel:
    name: Deploy to Vercel
    needs: [determine-environment, database-migrations]
    runs-on: ubuntu-latest
    environment: 
      name: ${{ needs.determine-environment.outputs.environment }}
      url: ${{ needs.determine-environment.outputs.url }}
    outputs:
      deployment-url: ${{ steps.deploy.outputs.url }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - name: Install Vercel CLI
        run: pnpm add -g vercel@latest
      
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=${{ needs.determine-environment.outputs.environment }} --token=${{ secrets.VERCEL_TOKEN }}
      
      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_PUBLISHABLE_KEY }}
          STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}
          SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      
      - name: Deploy to Vercel
        id: deploy
        run: |
          if [[ "${{ needs.determine-environment.outputs.environment }}" == "production" ]]; then
            deployment_url=$(vercel deploy --prod --token=${{ secrets.VERCEL_TOKEN }})
          else
            deployment_url=$(vercel deploy --token=${{ secrets.VERCEL_TOKEN }})
          fi
          echo "url=$deployment_url" >> $GITHUB_OUTPUT
      
      - name: Create deployment
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: '${{ needs.determine-environment.outputs.environment }}',
              required_contexts: [],
              auto_merge: false,
              production_environment: '${{ needs.determine-environment.outputs.environment }}' === 'production'
            });
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'success',
              environment_url: '${{ steps.deploy.outputs.url }}',
              description: 'Deployment successful'
            });

  # Post-deployment tests
  post-deployment-tests:
    name: Post-Deployment Tests
    needs: [determine-environment, deploy-vercel]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Run smoke tests
        run: |
          pnpm exec playwright install --with-deps chromium
          pnpm exec playwright test tests/e2e/smoke.spec.ts
        env:
          PLAYWRIGHT_TEST_BASE_URL: ${{ needs.deploy-vercel.outputs.deployment-url }}
      
      - name: Run health checks
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" "${{ needs.deploy-vercel.outputs.deployment-url }}/api/health")
          if [ $response -ne 200 ]; then
            echo "Health check failed with status $response"
            exit 1
          fi

  # Performance monitoring
  setup-monitoring:
    name: Setup Monitoring
    needs: [determine-environment, deploy-vercel]
    runs-on: ubuntu-latest
    if: needs.determine-environment.outputs.environment == 'production'
    steps:
      - name: Create Sentry release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        with:
          environment: production
          version: ${{ github.sha }}
          sourcemaps: './dist'
      
      - name: Configure Datadog monitoring
        run: |
          curl -X POST "https://api.datadoghq.com/api/v1/monitor" \
            -H "Content-Type: application/json" \
            -H "DD-API-KEY: ${{ secrets.DD_API_KEY }}" \
            -H "DD-APPLICATION-KEY: ${{ secrets.DD_APP_KEY }}" \
            -d '{
              "type": "metric alert",
              "query": "avg(last_5m):avg:system.cpu.user{app:field-reservations} > 90",
              "name": "High CPU usage on Field Reservations",
              "message": "CPU usage is above 90% @slack-field-reservations-alerts",
              "tags": ["app:field-reservations", "env:production"],
              "options": {
                "thresholds": {
                  "critical": 90,
                  "warning": 80
                }
              }
            }'

  # Send deployment notifications
  notify-deployment:
    name: Send Notifications
    needs: [determine-environment, deploy-vercel, post-deployment-tests]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Deployment to ${{ needs.determine-environment.outputs.environment }} ${{ job.status }}
            URL: ${{ needs.deploy-vercel.outputs.deployment-url }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      
      - name: Send Discord notification
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "Deployment Status"
          description: |
            **Environment:** ${{ needs.determine-environment.outputs.environment }}
            **Status:** ${{ job.status }}
            **URL:** ${{ needs.deploy-vercel.outputs.deployment-url }}
            **Commit:** ${{ github.sha }}
            **Author:** ${{ github.actor }}