name: Dependency Updates

on:
  schedule:
    - cron: '0 3 * * 1' # Every Monday at 3 AM
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  issues: write
  security-events: write

jobs:
  # Update dependencies
  update-dependencies:
    name: Update Dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: '8'
      
      - name: Update dependencies
        run: |
          # Update all dependencies to latest versions
          pnpm update --latest
          
          # Update specific critical dependencies
          pnpm update @supabase/supabase-js @supabase/ssr --latest
          pnpm update @stripe/stripe-js stripe --latest
          pnpm update next react react-dom --latest
          
          # Update dev dependencies
          pnpm update -D --latest
      
      - name: Run security audit
        id: audit
        run: |
          audit_output=$(pnpm audit --json || true)
          echo "audit_output<<EOF" >> $GITHUB_OUTPUT
          echo "$audit_output" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Check for critical vulnerabilities
          critical_count=$(echo "$audit_output" | jq '.metadata.vulnerabilities.critical // 0')
          high_count=$(echo "$audit_output" | jq '.metadata.vulnerabilities.high // 0')
          
          if [[ $critical_count -gt 0 ]]; then
            echo "has_critical=true" >> $GITHUB_OUTPUT
          else
            echo "has_critical=false" >> $GITHUB_OUTPUT
          fi
          
          if [[ $high_count -gt 0 ]]; then
            echo "has_high=true" >> $GITHUB_OUTPUT
          else
            echo "has_high=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Run tests
        run: |
          pnpm install
          pnpm test
          pnpm build
      
      - name: Check for changes
        id: changes
        run: |
          if [[ -n $(git status --porcelain) ]]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Create Pull Request
        if: steps.changes.outputs.has_changes == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.PAT_TOKEN }}
          commit-message: "chore(deps): update dependencies"
          title: "chore(deps): automated dependency updates"
          body: |
            ## Automated Dependency Update
            
            This PR contains automated dependency updates for the week.
            
            ### Security Audit Results
            ```json
            ${{ steps.audit.outputs.audit_output }}
            ```
            
            ### Update Summary
            - ✅ All dependencies updated to latest versions
            - ${{ steps.audit.outputs.has_critical == 'true' && '⚠️ Critical vulnerabilities found' || '✅ No critical vulnerabilities' }}
            - ${{ steps.audit.outputs.has_high == 'true' && '⚠️ High severity vulnerabilities found' || '✅ No high severity vulnerabilities' }}
            - ✅ All tests passing
            - ✅ Build successful
            
            ### Review Checklist
            - [ ] Review dependency changes in package.json
            - [ ] Check for breaking changes in major version updates
            - [ ] Verify all tests are passing
            - [ ] Test critical user flows in staging environment
            - [ ] Review security audit results
            
            ### Merge Instructions
            1. Review all changes carefully
            2. Deploy to staging environment first
            3. Run manual QA tests
            4. Merge if all checks pass
            
            ---
            *This PR was automatically created by the dependency update workflow.*
          branch: deps/automated-update-${{ github.run_number }}
          delete-branch: true
          labels: |
            dependencies
            automated
            ${{ steps.audit.outputs.has_critical == 'true' && 'security-critical' || '' }}
            ${{ steps.audit.outputs.has_high == 'true' && 'security-high' || '' }}

  # Renovate bot configuration
  configure-renovate:
    name: Configure Renovate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Create Renovate config
        run: |
          cat > renovate.json << 'EOF'
          {
            "$schema": "https://docs.renovatebot.com/renovate-schema.json",
            "extends": [
              "config:base",
              ":dependencyDashboard",
              ":semanticCommits",
              "group:allNonMajor",
              "schedule:weekly"
            ],
            "timezone": "America/New_York",
            "schedule": ["after 10pm and before 5am on every weekday", "every weekend"],
            "labels": ["dependencies", "renovate"],
            "packageRules": [
              {
                "matchPackagePatterns": ["*"],
                "matchUpdateTypes": ["minor", "patch"],
                "groupName": "all non-major dependencies",
                "groupSlug": "all-minor-patch",
                "automerge": true
              },
              {
                "matchPackagePatterns": ["^@types/"],
                "groupName": "all @types packages",
                "automerge": true
              },
              {
                "matchDepTypes": ["devDependencies"],
                "matchUpdateTypes": ["minor", "patch"],
                "automerge": true
              },
              {
                "matchPackageNames": ["node"],
                "allowedVersions": "20.x"
              },
              {
                "matchPackagePatterns": ["^@supabase/", "^@stripe/", "next", "react"],
                "groupName": "critical dependencies",
                "labels": ["critical-update"],
                "automerge": false
              }
            ],
            "vulnerabilityAlerts": {
              "labels": ["security"],
              "assignees": ["@security-team"]
            },
            "prConcurrentLimit": 10,
            "prCreation": "immediate",
            "automergeType": "pr",
            "automergeStrategy": "squash",
            "platformAutomerge": true,
            "dependencyDashboardApproval": true,
            "postUpdateOptions": [
              "pnpmDedupe",
              "yarnDedupeHighest"
            ]
          }
          EOF
      
      - name: Commit Renovate config
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add renovate.json
          git diff --cached --quiet || git commit -m "chore: add renovate configuration"
          git push

  # Dependency security scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --json-file-output=snyk.json
      
      - name: Upload Snyk results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk.sarif
      
      - name: Run npm audit
        run: |
          npm audit --json > npm-audit.json || true
      
      - name: Parse audit results
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const audit = JSON.parse(fs.readFileSync('npm-audit.json', 'utf8'));
            
            if (audit.metadata.vulnerabilities.critical > 0 || audit.metadata.vulnerabilities.high > 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: '🚨 Security vulnerabilities detected in dependencies',
                body: `
                  ## Security Audit Results
                  
                  - **Critical**: ${audit.metadata.vulnerabilities.critical}
                  - **High**: ${audit.metadata.vulnerabilities.high}
                  - **Moderate**: ${audit.metadata.vulnerabilities.moderate}
                  - **Low**: ${audit.metadata.vulnerabilities.low}
                  
                  Please review and update dependencies immediately.
                  
                  Run \`npm audit\` for more details.
                `,
                labels: ['security', 'dependencies', 'urgent']
              });
            }