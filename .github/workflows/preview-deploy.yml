name: Preview Deployment

on:
  pull_request:
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: '20.x'
  PNPM_VERSION: '8'

jobs:
  # Deploy preview
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      deployments: write
    outputs:
      preview-url: ${{ steps.deploy.outputs.url }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
      
      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Create preview database branch
        id: supabase
        run: |
          # Install Supabase CLI
          curl -sSL https://github.com/supabase/cli/releases/latest/download/supabase_linux_amd64.tar.gz | tar -xz
          sudo mv supabase /usr/local/bin/
          
          # Create preview branch
          branch_name="preview-pr-${{ github.event.pull_request.number }}"
          supabase branches create $branch_name --project-ref ${{ secrets.SUPABASE_PROJECT_REF }}
          
          # Get preview database URL
          preview_url=$(supabase branches show $branch_name --project-ref ${{ secrets.SUPABASE_PROJECT_REF }} | jq -r '.database_url')
          echo "database_url=$preview_url" >> $GITHUB_OUTPUT
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      
      - name: Run migrations on preview branch
        run: |
          supabase db push --db-url "${{ steps.supabase.outputs.database_url }}"
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      
      - name: Deploy to Vercel Preview
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          scope: ${{ secrets.VERCEL_ORG_ID }}
          alias-domains: |
            pr-${{ github.event.pull_request.number }}.fieldreservations.vercel.app
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ steps.supabase.outputs.database_url }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_TEST_SECRET_KEY }}
          NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_TEST_PUBLISHABLE_KEY }}
          SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
      
      - name: Wait for deployment
        run: sleep 30
      
      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v11
        with:
          urls: |
            ${{ steps.deploy.outputs.preview-url }}
            ${{ steps.deploy.outputs.preview-url }}/booking
          uploadArtifacts: true
          temporaryPublicStorage: true
      
      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Preview Deployment');
            });
            
            const body = `## üöÄ Preview Deployment
            
            | Environment | URL |
            |------------|-----|
            | Preview | ${{ steps.deploy.outputs.preview-url }} |
            | Database | Preview branch \`preview-pr-${{ github.event.pull_request.number }}\` |
            
            ### üìä Lighthouse Scores
            
            | Metric | Score |
            |--------|-------|
            | Performance | ${lighthouse.performance} |
            | Accessibility | ${lighthouse.accessibility} |
            | Best Practices | ${lighthouse.bestPractices} |
            | SEO | ${lighthouse.seo} |
            
            ### üß™ Test Results
            
            - Unit Tests: ‚úÖ Passing
            - E2E Tests: ‚è≥ Running...
            - Visual Tests: ‚è≥ Running...
            
            ### üìù Preview Features
            
            - Isolated database branch for testing
            - Test Stripe integration enabled
            - Email previews available at \`/api/email-preview\`
            
            ---
            
            *Updated: ${new Date().toISOString()}*
            `;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body
              });
            }

  # Run E2E tests on preview
  test-preview:
    name: Test Preview
    needs: deploy-preview
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps chromium
      
      - name: Run E2E tests
        run: pnpm test:e2e
        env:
          PLAYWRIGHT_TEST_BASE_URL: ${{ needs.deploy-preview.outputs.preview-url }}
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: preview-test-results
          path: test-results/
          retention-days: 7

  # Visual regression tests
  visual-tests:
    name: Visual Regression Tests
    needs: deploy-preview
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Run Percy visual tests
        run: |
          npm install -g @percy/cli
          percy exec -- pnpm test:visual
        env:
          PERCY_TOKEN: ${{ secrets.PERCY_TOKEN }}
          PLAYWRIGHT_TEST_BASE_URL: ${{ needs.deploy-preview.outputs.preview-url }}

  # Cleanup preview on PR close
  cleanup-preview:
    name: Cleanup Preview
    if: github.event.action == 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Delete Supabase preview branch
        run: |
          curl -sSL https://github.com/supabase/cli/releases/latest/download/supabase_linux_amd64.tar.gz | tar -xz
          sudo mv supabase /usr/local/bin/
          
          branch_name="preview-pr-${{ github.event.pull_request.number }}"
          supabase branches delete $branch_name --project-ref ${{ secrets.SUPABASE_PROJECT_REF }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      
      - name: Delete Vercel preview
        run: |
          # Vercel automatically cleans up preview deployments
          echo "Vercel preview will be automatically cleaned up"